#lang racket
(require towers-lib/game
         towers-lib/player
         towers-lib/connection
         towers-lib/preferences
         bazaar/rackunit
         )

(read-preferences)
(init-connection)

; `let's to ensure that variables are not from a different context
(let ()
  (define lg1 '("1.54" () 6 "plip" "plop" "Human" "Human" 
                       (((move 2 4 2 3 1) (move 1 4 1 3 1))
                        ((move 2 0 3 0 1) (move 1 0 1 1 1))
                        ((move 2 5 3 5 1) (move 2 3 1 3 1))
                        ((move 3 0 4 0 1) (move 2 1 2 2 1) (move 0 1 0 2 1))
                        ((move 3 5 4 5 1) (move 0 4 0 2 1))
                        ((move 1 1 1 3 2))
                        ((move 4 5 5 5 1) (move 0 2 2 2 1) (move 1 5 0 5 1))
                        ((move 4 0 5 0 1) (move 3 1 3 2 1) (move 3 2 2 2 1) (move 0 0 1 0 1))
                        ((move 3 4 3 5 1) (move 3 5 5 5 1) (move 4 4 4 5 1) end)
                        ((move 5 1 5 4 1) (move 5 0 4 0 1) (move 1 0 2 0 1))
                        ((move 4 5 4 1 1) (import 1) (move 5 5 5 4 1))
                        ((move 2 0 2 1 1) (move 2 1 4 1 1) (move 4 0 3 0 1) (move 2 2 3 2 1))
                        (resign) ())))
  (define g1 (list-game->game lg1))
  (send g1 replay-game)
  (check-equal? (send g1 game->list) lg1)
  (send g1 display-text)
  )

(let ()
  (define g2 (new game% [nb-cells 5] [player1-class "Human"] [player2-class "Human"]
                  [player1-name "Moi"] [player2-name "Toi"]))
  (send g2 display-text)
  (displayln (send g2 get-current-name))
  (define mv1 '(move 0 3 0 2 #f))
  (check-equal? (send g2 play-move mv1 #:test? #t) 1)
  (check-not-fail (send g2 play-move mv1))
  (check-false (send g2 play-move mv1 #:test? #t))
  (send g2 play-move mv1)
  (send g2 display-text)
  (send g2 get-current-name)
  )