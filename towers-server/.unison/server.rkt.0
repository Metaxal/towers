#lang racket/base
;;; Copyright (C) Laurent Orseau, 2010-2013
;;; GNU General Public Licence 3 (http://www.gnu.org/licenses/gpl.html)

(require (prefix-in db: "db.rkt")
         towers-lib/preferences
         towers-lib/game
         towers-lib/player
         bazaar/list
         web-server/servlet
         web-server/servlet-env
         web-server/page
         racket/format
         racket/class)

(provide start-server)

;; WARNING: http://docs.racket-lang.org/db/using-db.html?q=mysql-connect#%28part._intro-servlets%29

(define (update-game user game-id ply)
  (define lg (db:get-game game-id))
  (define g (list-game->game 
             lg2
             (new player-test-game%)
             (new player-test-game%)
             )) ; raises error if incorrect game

  (send g replay-game)
  (send g play-ply ply)
  (define lg2 (send g game->list))
  (db:update-game user game-id lg2)
  
  ;todo:
  ; get game from db
  ; add ply
  ; verify that ply is ok
  ; push new game to db
  ; send email to next player
  #f)

(define (fail . msgs)
    (list
     'Error
     (apply string-append (map ~a msgs))
     ))

(define (start req)
  (define response #f)
  (with-handlers ([values (Î»(e)(set! response (fail (exn-message e))))])
    (define (get-value sym [default #f])
      (or (get-binding sym req) default))
    (define date     (get-value 'date 0))
    (define user     (get-value 'login))
    (define pwd      (get-value 'password))
    (define version  (get-value 'version))
    (define action   (get-value 'action))
    (write
     (list date user pwd version action))
    (newline)
    
    (set! response 
          (cond [(not user)
                 (fail "Username must be provided")]
                [(equal? action "newuser")
                 (display "Creating user:")
                 (displayln user)
                 (db:create-user user pwd (get-value 'salt) (get-value 'email))]
                [(equal? action "getsalt")
                 (or (db:get-salt user)
                     (fail "Could not retrieve salt for user " user))]
                [(and action pwd)
                 (if (not (db:verify-user user pwd))
                     (fail "Could not verify user identity for user " user)
                     (case action
                       [("getplayers")
                        (db:get-players)]
                       [("newgame")
                        (define user1 (get-value 'username1))
                        (db:create-game user user1 (get-value 'username2)
                                        (get-value 'size) (get-value 'game) user1)]
                       [("getgame")
                        (db:get-game (get-value 'gameid))]
                       [("updategame")
                        (define game (get-value 'gameid))
                        (define ply (get-value 'ply))
                        (displayln "Updating game")
                        (write game)(newline)(write ply newline)
                        (update-game game ply)]
                       [("listgames")
                        (db:get-game-list user)]
                       [("listcurrentgames")
                        (db:get-current-game-list user)]
                       [("checkauth") #t]
                       [else (fail "bad request (auth Ok)")]))]
                [else (fail "bad request")]
                )))
  (displayln "Response:")
  (write response)(newline)
  (response/xexpr (~v response)))
  
;; database : (or/c #f string/c)
(define (start-server #:read-preferences [read-pref #t]
                      #:db-auto-connect [db-connect #t]
                      #:database [database #f])
  (when read-pref  (read-preferences))
  (when database   (set-pref 'database database))
  (when db-connect (db:set-auto-connection))
  (serve/servlet start
                 #:command-line? #t
                 ;#:connection-close? #t ; ?
                 #:listen-ip #f ; listen to every-one
                 #:port (string->number (get-pref 'server-port))
                 #:servlet-path (string-append (get-pref 'server-root-path) 
                                               (get-pref 'server-version))
                 ))

;; test with:
;; curl 'http://localhost:8000/do?a=b'


