#lang racket/base
;;; Copyright (C) Laurent Orseau, 2010-2013
;;; GNU General Public Licence 3 (http://www.gnu.org/licenses/gpl.html)

(require (only-in towers-lib/connection encode-password)
         db/base
         db/mysql
         racket/list
         racket/string)

(provide get-salt
         verify-user
         get-players
         create-game
         get-game-list
         get-current-game-list
         get-game-elos
         get-game
         update-elo
         update-game
         get-players-stats)

;;; TODO: TESTS!!!
;;; create an ad-hoc db, and make tests on it

(define cnx
  (mysql-connect #:user "root"
                 #:password "mysql"
                 #:database "towers"))

(define (get-pwd+salt user)
  (define pwd:salt
    (query-maybe-value
     cnx
     "select password from users where username=? and isPlayer=1 and block=0"
     user))
  (if pwd:salt
      (apply values (string-split pwd:salt ":"))
      (values #f #f)))

(define (get-salt user)
  (define-values (pwd salt) (get-pwd+salt user))
  salt)

(define (verify-user user pwd)
  (define-values (true-pwd salt) (get-pwd+salt user))
  (define enc-pwd pwd #;(encode-password pwd salt))
  (write (list enc-pwd true-pwd)) (newline)
  (and true-pwd
       (equal? true-pwd enc-pwd)))

; (verify-user "plip" (encode-password "plop" (get-salt "plip")))

(define (get-players)
  (query-list 
   cnx
   "select username from users where isPlayer=1 and block = 0"))

(define (create-game user user1 user2 size full-game next-player)
  (query ;-exec
   cnx
   "insert into games (username1, username2, size, fullGame, nextPlayer, lastUpdateDate, winner) 
    values (?, ?, ?, ?, ?, ?, '')"
   user1 user2 size full-game next-player (current-seconds))
  )

(define (get-game-list user [extra-cond ""])
  (query ;-rows
   cnx
   (string-append
    "select gameID, size, username1, username2, lastUpdateDate, nextPlayer, winner
    from games where (username1=? or username2=?) "
    extra-cond)
   user user))

(define (get-current-game-list user)
  (get-game-list user "and winner=''"))

(define (get-game game-id)
  (read
   (open-input-string
    (query-maybe-value 
     cnx
     "select fullGame from games where gameID=?"
     game-id))))

(define (get-game-elos game-id)
  (query-rows
   cnx
   "select username, elo from users, games 
    where gameID=? and (username=username1 or username=username2)"
   game-id))

(define (update-elo user elo)
  (query-exec cnx "update users set elo=? where username=?" elo user))

(define (update-game user game-id full-game next-player winner)
  (query-exec 
   cnx
   "update games set fullGame=?, nextPlayer=?, winner=?, lastUpdate=?
    where gameID=? and nextPlayer=?"
   full-game next-player winner (current-seconds) game-id user)
  )

(define (get-players-stats [start 0] [end 100])
  (query-rows
   cnx
   "select username, elo from users where isPlayer=1 and block=0 order by elo desc limit ?,?"
   start end))